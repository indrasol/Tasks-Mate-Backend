-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.bug_activity_logs (
  id text NOT NULL,
  bug_id text NOT NULL,
  user_id text NOT NULL,
  activity_type text NOT NULL,
  old_value jsonb,
  new_value jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bug_activity_logs_pkey PRIMARY KEY (id),
  CONSTRAINT bug_activity_logs_bug_id_fkey FOREIGN KEY (bug_id) REFERENCES public.bugs(id)
);
CREATE TABLE public.bug_attachments (
  attachment_id text NOT NULL,
  bug_id text NOT NULL,
  title text,
  name text,
  url text,
  uploaded_by text,
  uploaded_at timestamp with time zone DEFAULT now(),
  deleted_at timestamp with time zone,
  deleted_by text,
  is_inline boolean DEFAULT false,
  storage_path text,
  CONSTRAINT bug_attachments_pkey PRIMARY KEY (attachment_id),
  CONSTRAINT bug_attachments_bug_id_fkey FOREIGN KEY (bug_id) REFERENCES public.bugs(id)
);
CREATE TABLE public.bug_comments (
  id text NOT NULL,
  bug_id text NOT NULL,
  user_id text NOT NULL,
  content text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bug_comments_pkey PRIMARY KEY (id),
  CONSTRAINT bug_comments_bug_id_fkey FOREIGN KEY (bug_id) REFERENCES public.bugs(id)
);
CREATE TABLE public.bug_relations (
  source_bug_id text NOT NULL,
  target_bug_id text NOT NULL,
  relation_type text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  created_by text NOT NULL,
  CONSTRAINT bug_relations_pkey PRIMARY KEY (target_bug_id, relation_type, source_bug_id),
  CONSTRAINT bug_relations_source_bug_id_fkey FOREIGN KEY (source_bug_id) REFERENCES public.bugs(id),
  CONSTRAINT bug_relations_target_bug_id_fkey FOREIGN KEY (target_bug_id) REFERENCES public.bugs(id)
);
CREATE TABLE public.bug_watchers (
  bug_id text NOT NULL,
  user_id text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bug_watchers_pkey PRIMARY KEY (user_id, bug_id),
  CONSTRAINT bug_watchers_bug_id_fkey FOREIGN KEY (bug_id) REFERENCES public.bugs(id)
);
CREATE TABLE public.bugs (
  id text NOT NULL,
  tracker_id text,
  tracker_name text,
  title text NOT NULL,
  description text,
  status USER-DEFINED NOT NULL DEFAULT 'open'::bug_status_enum,
  priority USER-DEFINED DEFAULT 'medium'::bug_priority_enum,
  type USER-DEFINED DEFAULT 'bug'::bug_type_enum,
  assignee text,
  reporter text,
  project_id text NOT NULL,
  project_name text,
  tags ARRAY DEFAULT '{}'::text[],
  due_date timestamp with time zone,
  estimated_time interval,
  actual_time interval,
  environment text,
  steps_to_reproduce text,
  expected_result text,
  actual_result text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  closed_at timestamp with time zone,
  CONSTRAINT bugs_pkey PRIMARY KEY (id),
  CONSTRAINT bugs_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(project_id),
  CONSTRAINT bugs_tracker_id_fkey FOREIGN KEY (tracker_id) REFERENCES public.test_trackers(tracker_id)
);
CREATE TABLE public.daily_timesheets (
  id bigint NOT NULL DEFAULT nextval('daily_timesheets_id_seq'::regclass),
  org_id text NOT NULL,
  project_id text NOT NULL,
  user_id uuid NOT NULL,
  entry_date date NOT NULL DEFAULT CURRENT_DATE,
  in_progress text,
  completed text,
  blocked text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT daily_timesheets_pkey PRIMARY KEY (id),
  CONSTRAINT daily_timesheets_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT daily_timesheets_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(project_id),
  CONSTRAINT daily_timesheets_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profiles(id)
);
CREATE TABLE public.designations (
  name USER-DEFINED NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_by uuid,
  updated_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  designation_id text NOT NULL,
  slug USER-DEFINED,
  CONSTRAINT designations_pkey PRIMARY KEY (designation_id)
);
CREATE TABLE public.feedback (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  module text NOT NULL,
  type text NOT NULL,
  message text NOT NULL,
  submitted_by uuid,
  submitted_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT feedback_pkey PRIMARY KEY (id)
);
CREATE TABLE public.organization_invites (
  id text NOT NULL,
  org_id text NOT NULL,
  email text NOT NULL,
  designation USER-DEFINED,
  role USER-DEFINED,
  invited_by text,
  invite_status text DEFAULT 'pending'::text,
  sent_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_cancelled boolean DEFAULT false,
  cancel_date timestamp with time zone,
  updated_by text,
  org_name text,
  CONSTRAINT organization_invites_pkey PRIMARY KEY (id),
  CONSTRAINT organization_invites_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id)
);
CREATE TABLE public.organization_members (
  user_id uuid NOT NULL,
  is_active boolean DEFAULT true,
  invited_at timestamp with time zone,
  accepted_at timestamp with time zone,
  updated_at timestamp with time zone DEFAULT now(),
  deleted_at timestamp with time zone,
  delete_reason text,
  role USER-DEFINED,
  designation USER-DEFINED,
  org_id text NOT NULL,
  invited_by text,
  deleted_by text,
  email text,
  username text,
  updated_by text,
  CONSTRAINT organization_members_pkey PRIMARY KEY (org_id, user_id),
  CONSTRAINT organization_members_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id)
);
CREATE TABLE public.organization_profile (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  org_id text NOT NULL UNIQUE,
  vision text,
  mission text,
  core_values jsonb DEFAULT '[]'::jsonb,
  company_culture text,
  founding_year integer CHECK (founding_year >= 1800 AND founding_year::numeric <= EXTRACT(year FROM now())),
  industry text,
  company_size text CHECK (company_size = ANY (ARRAY['startup'::text, 'small'::text, 'medium'::text, 'large'::text, 'enterprise'::text])),
  headquarters text,
  website_url text,
  sustainability_goals text,
  diversity_commitment text,
  community_involvement text,
  last_updated_by uuid,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT organization_profile_pkey PRIMARY KEY (id),
  CONSTRAINT organization_profile_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT organization_profile_last_updated_by_fkey FOREIGN KEY (last_updated_by) REFERENCES auth.users(id),
  CONSTRAINT organization_profile_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.organizations (
  name text NOT NULL,
  description text,
  logo text,
  email text,
  metadata jsonb DEFAULT '{}'::jsonb,
  is_deleted boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  delete_reason text,
  designations ARRAY,
  org_id text NOT NULL,
  created_by text,
  updated_by text,
  deleted_by text,
  deleted_at timestamp with time zone,
  CONSTRAINT organizations_pkey PRIMARY KEY (org_id)
);
CREATE TABLE public.organizations_history (
  name text,
  description text,
  logo text,
  email text,
  metadata jsonb,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  deleted_at timestamp with time zone DEFAULT now(),
  delete_reason text,
  designations ARRAY,
  org_id text,
  created_by text,
  updated_by text,
  deleted_by text,
  is_deleted boolean
);
CREATE TABLE public.project_members (
  project_id text NOT NULL,
  user_id uuid NOT NULL,
  created_by text,
  updated_by text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  deleted_at timestamp with time zone,
  delete_reason text,
  designation USER-DEFINED,
  role USER-DEFINED,
  username text,
  CONSTRAINT project_members_pkey PRIMARY KEY (user_id, project_id),
  CONSTRAINT project_members_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(project_id)
);
CREATE TABLE public.project_resources (
  resource_id text NOT NULL,
  project_id text NOT NULL,
  project_name text NOT NULL,
  resource_url text,
  resource_type text,
  is_active boolean DEFAULT true,
  created_by text,
  updated_by text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  deleted_at timestamp with time zone,
  delete_reason text,
  resource_name text,
  storage_path text,
  CONSTRAINT project_resources_pkey PRIMARY KEY (resource_id),
  CONSTRAINT project_resources_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(project_id)
);
CREATE TABLE public.projects (
  project_id text NOT NULL,
  name text NOT NULL,
  description text,
  metadata jsonb DEFAULT '{}'::jsonb,
  status USER-DEFINED DEFAULT 'not_started'::project_status_enum,
  priority USER-DEFINED DEFAULT 'none'::priority_enum,
  start_date date,
  end_date date,
  created_by text,
  updated_by text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  deleted_at timestamp with time zone,
  delete_reason text,
  org_id text,
  project_owner text,
  team_members ARRAY,
  owner text,
  owner_designation text,
  team_member_designations ARRAY,
  CONSTRAINT projects_pkey PRIMARY KEY (project_id),
  CONSTRAINT projects_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id)
);
CREATE TABLE public.roles (
  name USER-DEFINED NOT NULL,
  permissions jsonb DEFAULT '{}'::jsonb,
  updated_at timestamp with time zone DEFAULT now(),
  role_id text NOT NULL,
  CONSTRAINT roles_pkey PRIMARY KEY (role_id)
);
CREATE TABLE public.scratchpads (
  org_id text NOT NULL,
  user_id uuid NOT NULL,
  user_name text NOT NULL,
  content text NOT NULL DEFAULT ''::text,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT scratchpads_pkey PRIMARY KEY (org_id, user_id),
  CONSTRAINT scratchpads_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id)
);
CREATE TABLE public.task_attachments (
  task_id text NOT NULL,
  title text,
  name text,
  url text,
  uploaded_by text,
  uploaded_at timestamp with time zone DEFAULT now(),
  deleted_at timestamp with time zone,
  deleted_by text,
  is_inline boolean DEFAULT false,
  attachment_id text NOT NULL UNIQUE,
  storage_path text,
  CONSTRAINT task_attachments_pkey PRIMARY KEY (attachment_id),
  CONSTRAINT task_attachments_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(task_id)
);
CREATE TABLE public.task_comments (
  task_id text NOT NULL,
  task_title text,
  created_by text,
  content text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  comment_id text NOT NULL,
  comment text,
  parent_comment_id text,
  mentions ARRAY,
  org_id text,
  CONSTRAINT task_comments_pkey PRIMARY KEY (comment_id),
  CONSTRAINT task_comments_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(task_id)
);
CREATE TABLE public.tasks (
  task_id text NOT NULL,
  project_id text NOT NULL,
  sub_tasks ARRAY DEFAULT '{}'::text[],
  dependencies ARRAY DEFAULT '{}'::text[],
  title text NOT NULL,
  description text,
  status USER-DEFINED DEFAULT 'not_started'::task_status_enum,
  assignee text,
  due_date date,
  priority USER-DEFINED DEFAULT 'none'::priority_enum,
  tags ARRAY DEFAULT '{}'::text[],
  metadata ARRAY DEFAULT '{}'::jsonb[],
  created_by text,
  updated_by text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  owner text,
  start_date text,
  end_date text,
  org_id text,
  is_subtask boolean DEFAULT false,
  CONSTRAINT tasks_pkey PRIMARY KEY (task_id),
  CONSTRAINT tasks_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(project_id),
  CONSTRAINT tasks_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id)
);
CREATE TABLE public.tasks_history (
  task_id text NOT NULL,
  title text,
  metadata ARRAY DEFAULT '{}'::jsonb[],
  hash_id text UNIQUE,
  updated_at timestamp with time zone DEFAULT now(),
  history_id text NOT NULL,
  created_at timestamp with time zone,
  created_by text,
  type text,
  action USER-DEFINED,
  actor_display text,
  CONSTRAINT tasks_history_pkey PRIMARY KEY (history_id),
  CONSTRAINT tasks_history_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(task_id)
);
CREATE TABLE public.test_tracker_tasks (
  tracker_id text NOT NULL,
  task_id text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  bug_id text NOT NULL,
  CONSTRAINT test_tracker_tasks_pkey PRIMARY KEY (tracker_id, task_id, bug_id),
  CONSTRAINT test_tracker_tasks_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(task_id),
  CONSTRAINT test_tracker_tasks_tracker_id_fkey FOREIGN KEY (tracker_id) REFERENCES public.test_trackers(tracker_id),
  CONSTRAINT test_tracker_tasks_bug_id_fkey FOREIGN KEY (bug_id) REFERENCES public.bugs(id)
);
CREATE TABLE public.test_trackers (
  tracker_id text NOT NULL,
  org_id text NOT NULL,
  project_id text NOT NULL,
  name text NOT NULL,
  description text,
  project_name text,
  status USER-DEFINED NOT NULL DEFAULT 'not_started'::task_status_enum,
  priority USER-DEFINED NOT NULL DEFAULT 'low'::priority_enum,
  creator_id uuid NOT NULL,
  creator_name text NOT NULL,
  tags ARRAY DEFAULT '{}'::text[],
  metadata jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  deleted_at timestamp with time zone,
  delete_reason text,
  updated_by text,
  CONSTRAINT test_trackers_pkey PRIMARY KEY (tracker_id),
  CONSTRAINT test_trackers_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT test_trackers_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(project_id)
);
CREATE TABLE public.user_daily_timesheets (
  id integer NOT NULL DEFAULT nextval('user_daily_timesheets_id_seq'::regclass),
  org_id text NOT NULL,
  user_id uuid NOT NULL,
  entry_date date NOT NULL,
  timesheet_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  has_data boolean DEFAULT (((timesheet_data ? 'in_progress'::text) AND (jsonb_array_length(COALESCE((timesheet_data -> 'in_progress'::text), '[]'::jsonb)) > 0)) OR ((timesheet_data ? 'completed'::text) AND (jsonb_array_length(COALESCE((timesheet_data -> 'completed'::text), '[]'::jsonb)) > 0)) OR ((timesheet_data ? 'blocked'::text) AND (jsonb_array_length(COALESCE((timesheet_data -> 'blocked'::text), '[]'::jsonb)) > 0))),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_daily_timesheets_pkey PRIMARY KEY (id),
  CONSTRAINT user_daily_timesheets_org_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT user_daily_timesheets_user_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_profiles (
  id uuid NOT NULL,
  email text,
  username text,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  CONSTRAINT user_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT user_profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL,
  username text NOT NULL UNIQUE,
  email text NOT NULL UNIQUE,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT users_pkey PRIMARY KEY (id)
);
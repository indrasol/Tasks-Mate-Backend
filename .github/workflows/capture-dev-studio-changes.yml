# .github/workflows/capture-dev-studio-changes.yml
name: Capture Supabase Studio changes (dev)

on:
  # Run on code pushes to dev (but avoid loops when we commit migrations)
  push:
    branches: [development]
    paths-ignore:
      - 'supabase/migrations/**'
  # Allow manual runs too (useful if you changed only the DB in Studio)
  workflow_dispatch:
  # Optional: run hourly to scoop up DB-first changes with no code push
  schedule:
    - cron: '0 * * * *'

jobs:
  db-diff-and-commit:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      DEV_PROJECT_ID: ${{ secrets.SUPABASE_DEV_PROJECT_ID }}   # project ref of your persistent "development" branch
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        with: { version: latest }  # installs the supabase CLI :contentReference[oaicite:2]{index=2}

      # Link this CI run to your DEV branch project, then diff
      - name: Link to dev branch
        run: supabase link --project-ref "$DEV_PROJECT_ID" --password "$SUPABASE_DB_PASSWORD"

      - name: Generate migration from dev DB (if any)
        run: |
          mkdir -p supabase/migrations
          ts=$(date -u +%Y%m%d%H%M%S)
          # Diff remote DEV DB â†’ create a new migration file in the repo
          # Include public, auth, storage so policies & buckets are captured when relevant
          supabase db diff --linked --schema public,auth,storage -f "from-dev-${ts}" || echo "No diff"
        # db diff generates SQL that reconciles local migrations -> remote state. :contentReference[oaicite:3]{index=3}

      - name: Commit migration if created
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(db): capture Studio changes from dev [skip ci]"
          file_pattern: supabase/migrations/*.sql
